#lang scribble/manual

@(require scribble/example)
@(require scriblib/footnote)


@;@(require racket-poppler/render-tex)
@;@(latex-path "/usr/bin/pdflatex")

@(define DrRacket (italic "DrRacket"))
@(define rack (italic "racket"))
@(define (csubexpr x) (elem @(italic x))) @; para la expresión cond y big-bang genérica, mejorar!

@(require racket/base)
@(require racket/sandbox)

@; define un evaluador que tiene, en su contexto, una variable mutable (un contador, digamos)
@; es para llevar un contador al estilo newcounter en latex. La idea es que los ejercios
@; a lo largo de toda la práctica tengan numeración correlativa. MEJORAR!!
@(define my-evaluator
   (parameterize ([sandbox-output 'string]
                  [sandbox-error-output 'string])
     (make-evaluator 'racket/base '(define ejer 0)
                                  '(define (incr-ejer) (set! ejer (+ ejer 1)))
                                  '(define ejemplo 0)
                                  '(define (incr-ejemplo) (set! ejemplo (+ ejemplo 1)))
                                  )))
@; si queremos incrementar el contador, hacemos lo siguiente: 
@;    @examples[#:eval my-evaluator #:hidden (incr)]
@; luego de incrementarlo, podemos usar el valor de eje como número de ejercicio:
@;    Ejercicio @examples[#:eval my-evaluator #:result-only eje].

@; así se pueden definir contadores para cada environment que uno quiera. Habría que investigar
@; un poco más si esto no está hecho (no lo encontré) y si no hay una forma mejor de hacerlo)

@title{Programación 1 - Segundo Parcial - Tema 2}

@larger{(08-06-2017)}

@; ejercicio -------------------
@; para incrementar el contador, mejorar!!!
@examples[#:eval my-evaluator #:hidden (incr-ejer)] @; incrementa contador
@bold{Ejercicio} @examples[#:eval my-evaluator #:result-only ejer]. @; usa el contador
Diseñe una función @racket[emparejar], que dado dos listas de números @racket[[a0, ... , ak]] y
@racket[[b0, ... , bk]], devuelve
una lista de estructuras @racket[posn] de la forma @racket[[p0, ..., pk]] tal que @racket[pi = (make-posn ai bi)].

En caso que las listas tengan diferente longitud, devuelve un string indicando tal situación.
No utilice @racket[map], @racket[fold] ni @racket[filter].

Dos ejemplos:
 @#reader scribble/comment-reader
           (racketblock
           (check-expect (emparejar (list 1 3) (list 40 50))
                          (list (make-posn 1 40) (make-posn 3 50)))
           (check-expect (emparejar (list 1 2 3) (list 40 50))
                           "Las listas no se pueden emparejar.")
           )

Incluya en su diseño al menos dos ejemplos más.

@; ejercicio -------------------
@; para incrementar el contador, mejorar!!!
@examples[#:eval my-evaluator #:hidden (incr-ejer)] @; incrementa contador
@bold{Ejercicio} @examples[#:eval my-evaluator #:result-only ejer]. @; usa el contador
Utilizando las funciones vistas en la segunda parte de la Práctica 5, diseñe una función @racket[prod-sum] que dada una lista de listas de números devuelva
el producto de la suma de cada una de las sublistas.

@#reader scribble/comment-reader
(racketblock
(check-expect (prod-sum (list (list 1 -3) (list 5 8 10))) -46)
(check-expect (prod-sum (list (list 1 -3) empty)) 0)
)

Incluya al menos dos ejemplos más en su diseño. Piense cuidadosamente cómo se comporta la función frente a la lista vacía.

@; ejercicio -------------------
@; para incrementar el contador, mejorar!!!
@examples[#:eval my-evaluator #:hidden (incr-ejer)] @; incrementa contador
@bold{Ejercicio} @examples[#:eval my-evaluator #:result-only ejer]. @; usa el contador
En este ejercicio queremos representar la nómina de empleados de una empresa, con la siguiente
información:
@itemlist[
          @item{Nombre}
           @item{Salario básico}
           @item{Productividad, entre 0 y 10}
           @item{Inasistencias en el año}
           ]

Usando estos valores, se calcula el bono de fin de año que percibirá el empleado, de acuerdo
a las siguientes condiciones:
@itemlist[
          @item{Si la productividad es menor a 5, no se le paga bono.}
          @item{Si la productividad es mayor a 5, y tiene a lo sumo 7 inasistencias, se le pagan
 dos salarios básicos. Con más inasistencias,  se le paga un salario básico.}
 ]

@itemlist[#:style 'ordered
          @item{Diseñe una estructura @racket[empleado] que permita representar toda la
          información necesaria.}
          @item{Diseñe una función @racket[bono] que calcule el bono a pagarle a un empleado}
          @item{Diseñe una función @racket[bajarSueldo] que dada estructura de tipo empleado,
           devuelve otra donde el salario es un 10% menor
          si tiene productividad menor a 6, o faltó 10 o más veces.}                                 
          ]
          
           